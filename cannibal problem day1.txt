from collections import deque

class State:
    def __init__(self, missionaries, cannibals, boat):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat = boat

    def is_valid(self):
        if self.missionaries < 0 or self.cannibals < 0 or self.missionaries > 3 or self.cannibals > 3:
            return False
        if self.missionaries < self.cannibals and self.missionaries > 0:
            return False
        if 3 - self.missionaries < 3 - self.cannibals and 3 - self.missionaries > 0:
            return False
        return True

    def __eq__(self, other):
        return self.missionaries == other.missionaries and self.cannibals == other.cannibals and self.boat == other.boat

    def __hash__(self):
        return hash((self.missionaries, self.cannibals, self.boat))

    def __str__(self):
        return f"Missionaries: {self.missionaries}, Cannibals: {self.cannibals}, Boat: {'Left' if self.boat == 0 else 'Right'}"

def successors(state):
    children = []
    if state.boat == 0:
        for m in range(3):
            for c in range(3):
                if 1 <= m + c <= 2:
                    new_state = State(state.missionaries - m, state.cannibals - c, 1)
                    if new_state.is_valid():
                        children.append(new_state)
    else:
        for m in range(3):
            for c in range(3):
                if 1 <= m + c <= 2:
                    new_state = State(state.missionaries + m, state.cannibals + c, 0)
                    if new_state.is_valid():
                        children.append(new_state)
    return children

def bfs(start, goal):
    queue = deque([(start, [])])
    visited = set()

    while queue:
        current, path = queue.popleft()
        visited.add(current)

        if current == goal:
            return path + [current]

        for child in successors(current):
            if child not in visited:
                queue.append((child, path + [current]))

    return None

def print_solution(path):
    for i, state in enumerate(path):
        print(f"Step {i}: {state}")

if __name__ == "__main__":
    start_state = State(3, 3, 0)
    goal_state = State(0, 0, 1)

    solution = bfs(start_state, goal_state)
    if solution:
        print("Solution found!")
        print_solution(solution)
    else:
        print("No solution exists.")








